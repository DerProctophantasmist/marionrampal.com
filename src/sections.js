// Generated by CoffeeScript 2.5.1
(function() {
  var CSON;

  CSON = require('cson-parser');

  require('angular').module('sections', [require('./language.picker')]).factory('Sections', [
    '$http',
    'Locale',
    function($http,
    Locale) {
      var addSection,
    data,
    delayedOnLoad,
    execute,
    findNextPageBeforeInsertion,
    findPreviousPageBeforeInsertion,
    getname,
    loadSectionsCsonFile,
    loadedOneSection,
    nbrOfSectionsLoaded,
    nbrOfSectionsToLoad,
    onDone,
    sections;
      delayedOnLoad = [];
      onDone = null;
      data = [];
      nbrOfSectionsToLoad = -1;
      nbrOfSectionsLoaded = 0;
      execute = function(func) {
        var i,
    len,
    section;
        for (i = 0, len = data.length; i < len; i++) {
          section = data[i];
          func(section);
        }
      };
      findPreviousPageBeforeInsertion = function(section) {
        if (section.pages.length) {
          return section.pages[section.pages.length - 1];
        }
        if (!section.previous) {
          return null;
        }
        return findPreviousPageBeforeInsertion(section.previous);
      };
      findNextPageBeforeInsertion = function(section) {
        if (!section.next) {
          return null;
        }
        if (section.next.pages[0]) {
          return section.next.pages[0];
        }
        return findNextPageBeforeInsertion(section.next);
      };
      loadedOneSection = function() {
        var funcPairs,
    i,
    len;
        nbrOfSectionsLoaded++;
        console.log(`loaded ${nbrOfSectionsLoaded} of ${nbrOfSectionsToLoad} sections`);
        if (nbrOfSectionsLoaded === nbrOfSectionsToLoad) {
          for (i = 0, len = delayedOnLoad.length; i < len; i++) {
            funcPairs = delayedOnLoad[i];
            execute(funcPairs.perSection);
            if (funcPairs.onEnd) {
              funcPairs.onEnd();
            }
          }
        }
      };
      addSection = function(section) {
        section.pages = [];
        section.getname = getname;
        if (data.length) {
          section.previous = data[data.length - 1];
          section.previous.next = section;
        }
        section.addPage = function(page) {
          page.active = false;
          page.section = this;
          page.id = section.id + '.' + this.pages.length;
          page.previous = findPreviousPageBeforeInsertion(section);
          if (page.previous) {
            if (page.previous.next) { //we have found the next page, otherwise it means it has not been loaded yet
              page.next = page.previous.next;
              page.previous.next.previous = page;
            }
            page.previous.next = page;
          } else {
            page.next = findNextPageBeforeInsertion(section);
            if (page.next) {
              // we know the next page had no previous, otherwise we'd have found it with findPreviousPageBeforeInsertion
              page.next.previous = page;
            }
          }
          // maybe we should have chosen between javascript arrays and a couple of linked list to represent our data, instead of doing both :)
          page.destroy = function() {
            if (page.next) {
              page.next.previous = page.previous;
            }
            if (page.previous) {
              page.previous.next = page.next;
            }
            return page.section.pages.splice(page.index,
    1);
          };
          return page.index = this.pages.push(page);
        };
        section.destroy = function() {
          if (section.next) {
            section.next.previous = section.previous;
          }
          if (section.previous) {
            section.previous.next = section.next;
          }
          return data.splice(section.index,
    1);
        };
        section.index = data.push(section);
        return loadedOneSection();
      };
      sections = {
        data: data,
        onLoad: function(funcPerSection,
    onEnd) {
          if (nbrOfSectionsToLoad === nbrOfSectionsLoaded) {
            execute(funcPerSection);
            if (onEnd) {
              onEnd();
            }
            return;
          }
          delayedOnLoad.push({
            perSection: funcPerSection,
            onEnd: onEnd
          });
        },
        addSection,
        nbrOfSectionsToLoad: function(nbr) {
          console.log(`nbr of sections to load: ${nbr}`);
          nbrOfSectionsToLoad = nbr;
          return nbrOfSectionsLoaded = 0;
        },
        isLoaded: function() {
          return nbrOfSectionsToLoad === nbrOfSectionsLoaded;
        }
      };
      getname = function() {
        if (typeof this.name === "string") {
          return this.name;
        }
        return this.name[Locale.get().language];
      };
      loadSectionsCsonFile = function() {
        var loaded;
        return loaded = true;
      };
      return sections;
    }
  ]);

  module.exports = 'sections';

}).call(this);

//# sourceMappingURL=sections.js.map
