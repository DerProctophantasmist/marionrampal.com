// Generated by CoffeeScript 2.5.1
(function() {
  var moment;

  module.exports = 'songkick';

  moment = require('moment');

  // require 'moment/locale/fr'
  // require 'moment-timezone' 
  // striptags = require('striptags')

  // getZoneFromOffset = (offsetString) -> moment.tz.names().find((tz) -> moment.tz(tz).format('Z') == offsetString)
  require('angular').module('songkick', ['config', require('./language.picker')]).factory('Songkick', [
    'Config',
    '$http',
    'Locale',
    function(Config,
    $http,
    Locale) {
      var calendars,
    errCount,
    key,
    loadCalendar,
    setLocalDateTime;
      key = Config.songkickApikey;
      calendars = {};
      errCount = 0;
      setLocalDateTime = function(event) {
        if (!event.start.dateTime) {
          return event.localDateTime = moment(event.start.date).format("l");
        } else if (event.start.timeZone !== void 0) {
          return event.localDateTime = moment(event.start.dateTime).tz(event.start.timeZone).format("lll");
        } else {
          return event.localDateTime = moment(event.start.dateTime).format("lll");
        }
      };
      loadCalendar = function(musicBrainzId) {
        var listEvents;
        listEvents = 'https://api.songkick.com/api/3.0/artists/mbid:' + musicBrainzId + '/calendar.json?apikey=' + key;
        return calendars[musicBrainzId] = $http.get(listEvents).then(function(response) {
          var events;
          events = response.data.resultsPage.results.event;
          console.log(events);
          return events.map(function(event) {
            var date,
    offsetString;
            date = event.start.datetime;
            // date = date.substring(0,date.length-5) + "+0100"
            offsetString = date.substring(date.length - 5);
            //offsetString is in the format +-hhmm, we need +-hh:mm
            offsetString = offsetString.slice(0,
    3) + ":" + offsetString.slice(3);
            return {
              summary: event.displayName,
              location: `${event.venue.displayName}, ${event.location.city}`,
              description: event.uri,
              start: date,
              localDateTime: moment(date).format("lll"),
              end: date,
              lat: event.venue.lat,
              lng: event.venue.lng
            };
          });
        // timezone:  getZoneFromOffset(offsetString)
        }).catch(function(response) {
          console.log('songkick request failed: ' + response.message + ', status: ' + response.status);
          if (response.status === 404) {
            return [];
          }
          // we "eat" the error at some point, won't retry to access the calendar (note it is a global err count, not per calendar):
          if (errCount++ < 3) {
            console.log("calendar error number " + errCount);
            return null;
          }
          return [];
        });
      };
      Locale.onChange(function() {
        var calId,
    calendar,
    event,
    results;
        moment.locale(Locale.get().language);
        results = [];
        for (calId in calendars) {
          calendar = calendars[calId];
          results.push((function() {
            var i,
    len,
    results1;
            results1 = [];
            for (i = 0, len = calendar.length; i < len; i++) {
              event = calendar[i];
              results1.push(setLocalDateTime(event));
            }
            return results1;
          })());
        }
        return results;
      });
      return function(calId) {
        if (calendars[calId] == null) {
          return loadCalendar(calId);
        } else {
          return calendars[calId];
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=songkick.js.map
