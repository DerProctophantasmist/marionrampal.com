// Generated by CoffeeScript 1.12.6
(function() {
  require('angular').module('data.provider', [require('./language.picker')]).factory('Sections', [
    '$http', 'Locale', function($http, Locale) {
      var delayedOnLoad, execute, getname, loaded, onDone, sections;
      loaded = false;
      delayedOnLoad = [];
      onDone = null;
      execute = function(func) {
        var i, len, ref, section;
        ref = sections.data;
        for (i = 0, len = ref.length; i < len; i++) {
          section = ref[i];
          func(section);
        }
      };
      sections = {
        data: [],
        onLoad: function(funcPerSection, onEnd) {
          if (loaded) {
            execute(funcPerSection);
            if (onEnd) {
              onEnd();
            }
            return;
          }
          delayedOnLoad.push({
            perSection: funcPerSection,
            onEnd: onEnd
          });
        }
      };
      getname = function() {
        if (typeof this.name === "string") {
          return this.name;
        }
        return this.name[Locale.get().language];
      };
      $http.get('/data/sections.json').then(function(response) {
        var funcPairs, i, j, k, len, len1, len2, nextSec, p, page, previousSec, ref, ref1, s, section;
        sections.data = response.data;
        ref = sections.data;
        for (s = i = 0, len = ref.length; i < len; s = ++i) {
          section = ref[s];
          section.getname = getname;
          section.previous = s > 0 ? sections.data[s - 1] : null;
          section.next = s < sections.data.length - 1 ? sections.data[s + 1] : null;
          ref1 = section.pages;
          for (p = j = 0, len1 = ref1.length; j < len1; p = ++j) {
            page = ref1[p];
            page.active = false;
            page.section = section;
            page.id = section.id + '.' + p;
            if (p > 0) {
              page.previous = section.pages[p - 1];
            } else {
              if (s > 0) {
                previousSec = sections.data[s - 1];
                page.previous = previousSec.pages[previousSec.pages.length - 1];
              } else {
                page.previous = null;
              }
            }
            if (p < section.pages.length - 1) {
              page.next = section.pages[p + 1];
            } else {
              if (s < sections.data.length - 1) {
                nextSec = sections.data[s + 1];
                page.next = nextSec.pages[0];
              } else {
                page.next = null;
              }
            }
          }
        }
        loaded = true;
        for (k = 0, len2 = delayedOnLoad.length; k < len2; k++) {
          funcPairs = delayedOnLoad[k];
          execute(funcPairs.perSection);
          if (funcPairs.onEnd) {
            funcPairs.onEnd();
          }
        }
      }, function(response) {
        return console.log('sections data request failed: ' + response.toString);
      });
      return sections;
    }
  ]);

  module.exports = 'data.provider';

}).call(this);

//# sourceMappingURL=data.provider.js.map
