// Generated by CoffeeScript 2.5.1
(function() {
  var moment, p, striptags;

  module.exports = 'calendar';

  moment = require('moment');

  require('moment/locale/fr');

  require('moment-timezone');

  striptags = require('striptags');

  p = require('bluebird');

  require('angular').module('calendar', ['config', require('angular-marked'), require('angular-utils-pagination'), require('./language.picker'), require('./states')]).factory('Calendars', [
    'Config',
    '$http',
    'Locale',
    'State',
    function(Config,
    $http,
    Locale,
    State) {
      var calendarId,
    calendars,
    errCount,
    key,
    loadCalendar,
    setLocalTime;
      key = Config.googleApiKey;
      calendars = {};
      moment.locale(Locale.get().language);
      errCount = 0;
      setLocalTime = function(event) {
        if (!event.start.dateTime) {
          return event.localTime = moment(event.start.date).format("l");
        } else if (event.start.timeZone !== void 0) {
          return event.localTime = moment(event.start.dateTime).tz(event.start.timeZone).format("lll");
        } else {
          return event.localTime = moment(event.start.dateTime).format("lll");
        }
      };
      loadCalendar = function(calId) {
        var listEvents;
        listEvents = 'https://www.googleapis.com/calendar/v3/calendars/' + calId + '/events?key=' + key + '&timeMin=' + encodeURIComponent(moment().format()) + '&singleEvents=true&orderBy=startTime&fields=items(htmlLink,summary,location,description,start(date,dateTime,timeZone))';
        return calendars[calId] = $http.get(listEvents).then(function(response) {
          var calendar,
    event,
    i,
    len,
    ref;
          calendar = [];
          ref = response.data.items;
          for (i = 0, len = ref.length; i < len; i++) {
            event = ref[i];
            setLocalTime(event);
            console.log(event.description);
            event.description = striptags(event.description,
    ['a',
    'u',
    'i',
    'b',
    'ol',
    'li',
    'ul'],
    '  \n');
            calendar.push(event);
          }
          console.log(response.data);
          return calendar;
        }).catch(function(response) {
          console.log('google calendar request failed: ' + response.message + ', status: ' + response.status);
          if (response.status === 404) {
            return [];
          }
          // we "eat" the error at some point, won't retry to access the calendar (note it is a global err count, not per calendar):
          if (errCount++ < 3) {
            console.log("calendar error number " + errCount);
            return null;
          }
          return [];
        });
      };
      Locale.onChange(function() {
        var calId,
    calendar,
    event,
    results;
        moment.locale(Locale.get().language);
        results = [];
        for (calId in calendars) {
          calendar = calendars[calId];
          results.push((function() {
            var i,
    len,
    results1;
            results1 = [];
            for (i = 0, len = calendar.length; i < len; i++) {
              event = calendar[i];
              results1.push(setLocalTime(event));
            }
            return results1;
          })());
        }
        return results;
      });
      
      //this is just preloading: the calendar id is also defined in the website section that displays it
      calendarId = Config.googleCalendar;
      loadCalendar(calendarId);
      return function(calId) {
        if (calendars[calId] == null) {
          return loadCalendar(calId);
        } else {
          return calendars[calId];
        }
      };
    }
  ]).component('googleCalendar', {
    template: '<ul class="calendar"><li dir-paginate="event in $c.calendar |itemsPerPage: 5" class="calendar-event">' + '<button ng-click="$c.toogleExpand(event)" ng-show="event.description" class="toggle-expand fa-stack fa-sm"> <i class="fa fa-circle fa-stack-2x"></i> <i class="fa fa-stack-1x fa-inverse" ng-class=\'{"fa-minus":event.expanded, "fa-plus":!event.expanded}\' ></i></button>' + '<span class="localTime">{{event.localTime}}</span>' + '<span class="summary">{{event.summary}}</span>' + '<a target="blank" ng-href="{{$c.googleMaps(event)}}" class="location">{{event.location}}</a>' + '<div class="description" ng-show="event.expanded" marked="event.description"></div>' + '</li><dir-pagination-controls></dir-pagination-controls></ul>',
    bindings: {
      id: '@',
      emptyEvent: '@'
    },
    controller: [
      'Calendars',
      '$scope',
      function(Calendars,
      $scope) {
        this.calendar = [];
        this.toogleExpand = function(event) {
          event.expanded = !event.expanded;
        };
        this.googleMaps = function(event) {
          //google maps links in calendar should only be active if event is expanded: Why the hell? activate all the time
          //            if event.expanded
          return "https://www.google.com/maps/search/?api=1&query=" + encodeURIComponent(event.location);
        };
        //            return ""
        this.$onInit = function() {
          Calendars(this.id).then((res) => {
            if ((res != null) && res.length === 0) {
              $scope.$emit(this.emptyEvent);
            }
            console.log(JSON.stringify("calendar: " + res));
            return this.calendar = res;
          });
        };
      }
    ],
    controllerAs: '$c'
  });

}).call(this);

//# sourceMappingURL=calendar.js.map
