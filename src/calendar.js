// Generated by CoffeeScript 1.12.6
(function() {
  var moment;

  module.exports = 'calendar';

  moment = require('moment');

  require('moment/locale/fr');

  require('moment-timezone');

  require('angular').module('calendar', ['config', require('angular-marked'), require('angular-utils-pagination'), require('./language.picker')]).factory('Calendars', [
    'Config', '$http', 'Locale', function(Config, $http, Locale) {
      var calendarId, calendars, key, loadCalendar, setLocalTime;
      key = Config.googleApiKey;
      calendars = {};
      moment.locale(Locale.get().language);
      setLocalTime = function(event) {
        if (!event.start.dateTime) {
          return event.localTime = moment(event.start.date).format("l");
        } else if (event.start.timeZone !== void 0) {
          return event.localTime = moment(event.start.dateTime).tz(event.start.timeZone).format("lll");
        } else {
          return event.localTime = moment(event.start.dateTime).format("lll");
        }
      };
      loadCalendar = function(calId) {
        var listEvents;
        listEvents = 'https://www.googleapis.com/calendar/v3/calendars/' + calId + '/events?key=' + key + '&timeMin=' + encodeURIComponent(moment().format()) + '&singleEvents=true&orderBy=startTime&fields=items(htmlLink,summary,location,description,start(date,dateTime,timeZone))';
        return $http.get(listEvents).then(function(response) {
          var event, i, len, ref;
          ref = response.data.items;
          for (i = 0, len = ref.length; i < len; i++) {
            event = ref[i];
            setLocalTime(event);
            calendars[calId].push(event);
          }
          console.log(response.data);
        }, function(response) {
          return console.log('google calendar request failed: ' + JSON.stringify(response));
        });
      };
      Locale.onChange(function() {
        var calId, calendar, event, results;
        moment.locale(Locale.get().language);
        results = [];
        for (calId in calendars) {
          calendar = calendars[calId];
          results.push((function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = calendar.length; i < len; i++) {
              event = calendar[i];
              results1.push(setLocalTime(event));
            }
            return results1;
          })());
        }
        return results;
      });
      calendarId = Config.googleCalendar;
      calendars[calendarId] = [];
      loadCalendar(calendarId);
      return function(calId) {
        if (calendars[calId] === null) {
          calendars[calId] = [];
          loadCalendar(calId);
        }
        return calendars[calId];
      };
    }
  ]).directive('googleCalendar', [
    'Calendars', 'marked', function(Calendars, marked) {
      return {
        restrict: 'E',
        template: '<ul class="calendar"><li dir-paginate="event in calendars(id)|itemsPerPage: 5" class="calendar-event">' + '<button ng-click="toogleExpand(event)" ng-show="event.description" class="toggle-expand fa-stack fa-sm"> <i class="fa fa-circle fa-stack-2x"></i> <i class="fa fa-stack-1x fa-inverse" ng-class=\'{"fa-chevron-down":event.expanded, "fa-chevron-up":!event.expanded}\' ></i></button>' + '<span class="localTime">{{event.localTime}}</span>' + '<span class="summary">{{event.summary}}</span>' + '<div class="location">{{event.location}}</div>' + '<div class="description" ng-show="event.expanded" marked="event.description"></div>' + '</li><dir-pagination-controls></dir-pagination-controls></ul>',
        scope: {
          id: '@'
        },
        replace: true,
        link: function(scope, elt, attrs) {
          scope.calendars = Calendars;
          scope.marked = marked;
          return scope.toogleExpand = function(event) {
            event.expanded = !event.expanded;
          };
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=calendar.js.map
