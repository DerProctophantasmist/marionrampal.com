// Generated by CoffeeScript 1.12.6
(function() {
  module.exports = 'includeMarkup';

  require('angular').module('includeMarkup', ['config', require('./marked.config'), require('angular-marked'), require('./quirks'), require('./mobile.expand'), require('./language.picker')]).factory('ReadDataFile', [
    '$http', function($http) {
      var files, loadDataFile;
      files = {};
      loadDataFile = function(filename, dataObject) {
        return $http.get('/data/' + filename).then(function(response) {
          files[filename] = response.data;
          dataObject.data = response.data;
        }, function(response) {
          return console.log('Could not load ' + filename + ' : ' + JSON.stringify(response));
        });
      };
      return function(filename, dataObject) {
        if (!files[filename]) {
          loadDataFile(filename, dataObject);
        } else {
          dataObject.data = files[filename];
        }
      };
    }
  ]).directive('includeMarkup', [
    'ReadDataFile', 'marked', 'Quirks', 'MobileExpand', 'State', 'Locale', function(ReadDataFile, marked, Quirks, MobileExpand, State, Locale) {
      return {
        restrict: 'E',
        template: '<span class="include-markup" ng-style="{\'display\':(content.inline && !isExpanded())?\'inline\':\'block\', \'width\': (content.inline?\'auto\':\'100%\')}">' + '<span class="include-markup-chapeau" ng-style="{\'display\':(content.inline)?\'inline-block\':\'block\'}" ng-if="chapeau" marked="chapeau" compile="true" popup-links="popupLinks"></span> ' + '<span ng-style="{\'display\':(content.inline?\'inline\':\'inline-block\'), \'width\': (content.inline?\'auto\':\'100%\'), \'text-align\':(content.inline?\'inherit\':\'center\')}">' + '<button ng-show="!defaultExpanded() || !content.data" ng-click="toogleExpand(content)" class="toggle-expand" ng-class="{\'inline\':content.inline}" > ' + '<span  ng-show="isExpanded() && !content.data"><i class="fa fa-spinner fa-pulse"></i>' + '<span class="sr-only" >Loading...</span></span>' + '<i class="fa" ng-class=\'{"fa-minus":content.expanded && content.data, "fa-plus":!isExpanded()}\' ></i></button></span>' + '<span ng-if="!isMobileLayout()" class="more" ng-show="isExpanded() && content.data" marked="content.data.replace(chapeau,\'\')" compile="true" popup-links="popupLinks"></span> </span>',
        scope: {
          content: '=',
          popupLinks: '='
        },
        replace: true,
        link: function(scope, elt, attrs) {
          var filename, localizeChapeau, localizeFilename, onclose;
          localizeFilename = function(filename) {
            if (filename.substr(-4) === '.md') {
              return filename;
            }
            return filename + '.' + Locale.get().language + '.md';
          };
          localizeChapeau = function(chapeau) {
            if (typeof chapeau === "object") {
              return chapeau[Locale.get().language];
            } else {
              return chapeau;
            }
          };
          scope.chapeau = localizeChapeau(scope.content.chapeau);
          scope.isMobileLayout = Quirks.isMobileLayout;
          scope.isExpanded = (function() {
            return scope.content.expanded || scope.defaultExpanded();
          });
          scope.toogleExpand = function(content) {
            var filename, onclose;
            if (scope.defaultExpanded()) {
              return;
            }
            if (!content.expanded) {
              filename = localizeFilename(content.filename);
              if (!content.data) {
                ReadDataFile(filename, content);
              }
              content.expanded = true;
              if (Quirks.isMobileLayout()) {
                onclose = (function() {
                  content.expanded = false;
                });
                MobileExpand.open(content, scope.popupLinks).then(onclose, onclose);
              }
            } else {
              content.expanded = false;
            }
          };
          Locale.onChange(function() {
            var locFilename;
            locFilename = localizeFilename(scope.content.filename);
            if (scope.content.data && (scope.content.filename !== locFilename)) {
              scope.content.data = null;
              if (scope.isExpanded()) {
                ReadDataFile(localizeFilename(scope.content.filename), scope.content);
              }
            }
            return scope.chapeau = localizeChapeau(scope.content.chapeau);
          }, scope);
          scope.defaultExpanded = function() {
            return State.singleSection() && scope.content.main;
          };
          if (scope.defaultExpanded()) {
            filename = localizeFilename(scope.content.filename);
            ReadDataFile(filename, scope.content);
            if (Quirks.isMobileLayout()) {
              onclose = (function() {
                State.home();
              });
              return MobileExpand.open(scope.content, scope.popupLinks).then(onclose, onclose);
            }
          }
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=include.markup.js.map
