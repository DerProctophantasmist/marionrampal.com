// Generated by CoffeeScript 2.5.1
(function() {
  var EventEmitter, i, len, name, picker, ref;

  module.exports = 'languagePicker';

  require('angular-bootstrap-locale-dialog');

  EventEmitter = require('events');

  picker = require('angular').module('languagePicker', ['ui.bootstrap', 'ui.bootstrap.locale-dialog']).factory('Locale', [
    '$window',
    function($window) {
      var availLoc,
    curLocale,
    defaultLoc,
    emitter,
    locale,
    storedLocale;
      defaultLoc = {
        "en": "en-US",
        "fr": "fr-FR"
      };
      availLoc = {
        "en-US": {
          "name": "English (US)",
          "language": "en",
          "country": "us"
        },
        "fr-FR": {
          "name": "Fran\u00e7ais (FR)",
          "language": "fr",
          "country": "fr"
        }
      };
      emitter = new EventEmitter();
      emitter.setMaxListeners(100);
      if (storedLocale = $window.localStorage.getItem('marionrampal.locale')) {
        console.log("stored locale: " + $window.localStorage.getItem('marionrampal.locale'));
        curLocale = availLoc[storedLocale];
        if (!curLocale) {
          localStorage.removeItem('marionrampal.locale');
        }
      } else {
        console.log("no stored locale");
      }
      return locale = {
        available: availLoc,
        set: function(newLocale,
    persist = false) {
          if (newLocale.length === 2) {
            newLocale = defaultLoc[newLocale];
          }
          if (availLoc[newLocale] != null) {
            curLocale = availLoc[newLocale];
            emitter.emit('changeLocale');
            if (persist) {
              $window.localStorage.setItem('marionrampal.locale',
    newLocale);
              console.log("stored locale: " + $window.localStorage.getItem('marionrampal.locale'));
            }
          } else if (curLocale === null) {
            curLocale = availLoc['fr-FR'];
            emitter.emit('changeLocale');
          }
          return curLocale;
        },
        get: function() {
          return curLocale;
        },
        name: function() {
          if (curLocale) {
            return curLocale.name;
          } else {
            null;
            return console.log("locale was not set!");
          }
        },
        init: function(prefLang,
    forceLang) {
          console.log("locale init, prefLang: " + prefLang + ", forceLang: " + forceLang);
          if (forceLang) {
            return locale.set(forceLang);
          } else if (storedLocale == null) {
            return locale.set(prefLang); //if prefLang is not valid locale will be set to French by default
          }
        },
        onChange: function(callback,
    scope) {
          emitter.on('changeLocale',
    callback);
          if (scope) {
            return scope.$on('$destroy',
    function() {
              return emitter.removeListener('changeLocale',
    callback);
            });
          }
        }
      };
    }
  ]).controller('LangPickCtrl', [
    '$localeSelectorDialog',
    'Locale',
    function($localeSelectorDialog,
    Locale) {
      var vm;
      vm = this;
      vm.selectedLocale = Locale.name();
      console.log(vm.selectedLocale);
      vm.classShowFlag = function() {
        return "flag-icon flag-icon-" + Locale.get().country;
      };
      vm.changeLocale = function() {
        $localeSelectorDialog.open({
          locales: Locale.available,
          showFlags: true,
          showSearch: false
        }).result.then(function(selectedLocale) {
          Locale.set(selectedLocale,
    true);
          vm.selectedLocale = Locale.name();
        });
      };
    }
  ]);

  ref = ['Placeholder', 'Value'];
  // we generate multiple directives in the form i18n-attrname/i18nAttrname:
  // translations are passed to i18nAttrName in the form {fr:"French", en:"English"}, and then put into attrName
  // I've commented out the code to watch for change of the i18nAttribute, we don't really need it
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    (function(name) {
      var attrName, i18nAttrName;
      i18nAttrName = 'i18n' + name;
      attrName = name.substr(0, 1).toLowerCase() + name.substr(1); //name of the "working" attribute into which we'll inject the translation
      return picker.directive(i18nAttrName, [
        'Locale',
        function(Locale) {
          return {
            //      scopeParam = {}
            //      scopeParam[i18nAttrName] = '@'
            restrict: 'A',
            //        scope: scopeParam,
            link: function(scope,
        elt,
        attr) {
              var attrValue,
        updatei18n;
              attrValue = scope.$eval(attr[i18nAttrName]);
              updatei18n = function() {
                return elt.attr(attrName,
        attrValue[Locale.get().language]);
              };
              updatei18n();
              return Locale.onChange(updatei18n,
        scope);
            }
          };
          //          scope.$watch( i18nAttrName, (newValue, oldValue) -> 
          //            attrValue = scope.$eval newValue
          //            updatei18n()
          //          )   
          return params;
        }
      ]);
    })(name);
  }

}).call(this);

//# sourceMappingURL=language.picker.js.map
