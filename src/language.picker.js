// Generated by CoffeeScript 1.12.6
(function() {
  var EventEmitter, fn, i, len, name, picker, ref;

  module.exports = 'languagePicker';

  require('angular-bootstrap-locale-dialog');

  EventEmitter = require('events');

  require('flag-icon-css');

  picker = require('angular').module('languagePicker', ['ui.bootstrap', 'ui.bootstrap.locale-dialog']).factory('Locale', [
    '$window', function($window) {
      var availLoc, curLocale, emitter, locale, storedLocale;
      availLoc = {
        "en-US": {
          "name": "English (US)",
          "language": "en",
          "country": "us"
        },
        "fr-FR": {
          "name": "Fran\u00e7ais (FR)",
          "language": "fr",
          "country": "fr"
        }
      };
      emitter = new EventEmitter();
      emitter.setMaxListeners(100);
      if (storedLocale = $window.localStorage.getItem('marionrampal.locale')) {
        curLocale = availLoc[storedLocale];
        if (!curLocale) {
          localStorage.removeItem('marionrampal.locale');
        }
      }
      return locale = {
        available: availLoc,
        set: function(newLocale, persist) {
          if (persist == null) {
            persist = false;
          }
          if (availLoc[newLocale] != null) {
            curLocale = availLoc[newLocale];
            emitter.emit('changeLocale');
            if (persist != null) {
              $window.localStorage.setItem('marionrampal.locale', newLocale);
              console.log("storage: " + $window.localStorage.getItem('marionrampal.locale'));
            }
          } else if (curLocale === null) {
            curLocale = availLoc['fr-FR'];
            emitter.emit('changeLocale');
          }
          return curLocale;
        },
        get: function() {
          return curLocale;
        },
        name: function() {
          if (curLocale) {
            return curLocale.name;
          } else {
            null;
            return console.log("locale was not set!");
          }
        },
        init: function(prefLang, forceLang) {
          if ((forceLang != null) && (availLoc[forceLang] != null)) {
            return locale.set(forceLang, true);
          } else if (curLocale === null && prefLang && (availLoc[prefLang] != null)) {
            return locale.set(prefLang);
          }
        },
        onChange: function(callback, scope) {
          emitter.on('changeLocale', callback);
          if (scope) {
            return scope.$on('$destroy', function() {
              return emitter.removeListener('changeLocale', callback);
            });
          }
        }
      };
    }
  ]).controller('LangPickCtrl', [
    '$localeSelectorDialog', 'Locale', function($localeSelectorDialog, Locale) {
      var vm;
      vm = this;
      vm.selectedLocale = Locale.name();
      console.log(vm.selectedLocale);
      vm.classShowFlag = function() {
        return "flag-icon flag-icon-" + Locale.get().country;
      };
      vm.changeLocale = function() {
        $localeSelectorDialog.open({
          locales: Locale.available,
          showFlags: true,
          showSearch: false
        }).result.then(function(selectedLocale) {
          Locale.set(selectedLocale, true);
          vm.selectedLocale = Locale.name();
        });
      };
    }
  ]);

  ref = ['Placeholder', 'Value'];
  fn = function(name) {
    var attrName, i18nAttrName;
    i18nAttrName = 'i18n' + name;
    attrName = name.substr(0, 1).toLowerCase() + name.substr(1);
    return picker.directive(i18nAttrName, [
      'Locale', function(Locale) {
        return {
          restrict: 'A',
          link: function(scope, elt, attr) {
            var attrValue, updatei18n;
            attrValue = scope.$eval(attr[i18nAttrName]);
            updatei18n = function() {
              return elt.attr(attrName, attrValue[Locale.get().language]);
            };
            updatei18n();
            return Locale.onChange(updatei18n, scope);
          }
        };
        return params;
      }
    ]);
  };
  for (i = 0, len = ref.length; i < len; i++) {
    name = ref[i];
    fn(name);
  }

}).call(this);

//# sourceMappingURL=language.picker.js.map
